<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guide on Computable(verse)</title>
    <link>http://computableverse.com/tags/guide/index.xml</link>
    <description>Recent content in Guide on Computable(verse)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://computableverse.com/tags/guide/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Convert any folder into a website using Pandoc and a Makefile</title>
      <link>http://computableverse.com/blog/create-website-using-pandoc-make-file/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://computableverse.com/blog/create-website-using-pandoc-make-file/</guid>
      <description>&lt;p&gt;It was a long day. I was lurking HackerNews and /r/programming.
Things were going slow. I had been taking quite a lot of notes
inside a plain ol&amp;rsquo; directory. I know, 2016 right?! But every
single note taking application had failed me.&lt;/p&gt;

&lt;p&gt;Although I had no use of viewing my &lt;em&gt;markdown&lt;/em&gt; notes in the
browser, I decided to do it anyways. For the sake of completeness.&lt;/p&gt;

&lt;p&gt;I immediately thought of &lt;a href=&#34;https://github.com/oxalorg/dystic&#34;&gt;dystic&lt;/a&gt;,
my personal static site generator, but dissed it as too heavy.
I decided then, that I wanted something I could hack together in
the next 10 minutes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I immediately thought of &lt;a href=&#34;https://pandoc.org&#34;&gt;pandoc&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc --toc --from markdown --to html my-note.md -o my-note.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done. Easy, wasn&amp;rsquo;t it?&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s do this for the entire directory, &lt;em&gt;recursively&lt;/em&gt;. We could
write a simple shell script, but that would run everytime on everyfile.
We don&amp;rsquo;t want that. We want to regenerate the &lt;em&gt;html&lt;/em&gt; only if the
&lt;em&gt;markdown&lt;/em&gt; counterpart has been updated since the previous build.&lt;/p&gt;

&lt;p&gt;What &lt;del&gt;better&lt;/del&gt; faster way than to use GNU Make for &lt;code&gt;mtime&lt;/code&gt; based
builds.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /notes
nvim Makefile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;/notes/Makefile&lt;/strong&gt;:&lt;/p&gt;
# Find all markdown files
MARKDOWN=$(shell find . -iname &#34;*.md&#34;)
# Form all &#39;html&#39; counterparts
HTML=$(MARKDOWN:.md=.html)

.PHONY = all tar clean
all: $(HTML)

%.html: %.md
    pandoc --from markdown --to html $&lt; -o $@

tar: $(MARKDOWN)
    tar --exclude=notes.tar.gz --exclude=.git/ -czvf notes.tar.gz ./

clean:
    rm $(HTML)

&lt;p&gt;We&amp;rsquo;re almost done. Now just run &lt;code&gt;make all&lt;/code&gt; in &lt;code&gt;/notes&lt;/code&gt; and all your
&lt;em&gt;markdown&lt;/em&gt; files will be built into &lt;em&gt;html&lt;/em&gt; files.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;make clean&lt;/code&gt; to remove all the html files and run &lt;code&gt;make tar&lt;/code&gt; to
backup all your notes.&lt;/p&gt;

&lt;p&gt;Simply open your browser and type &amp;ldquo;/notes&amp;rdquo; (or your complete
path) into the address bar and voila! It&amp;rsquo;s not pretty but it
works. (PS: use &lt;code&gt;file:///path/to/folder&lt;/code&gt; if not using chrome)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To make your files more pretty use my minimal css theme
&lt;a href=&#34;https://github.com/oxalorg/sakura&#34;&gt;sakura&lt;/a&gt; and then change the pandoc
command as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /notes
wget &amp;quot;https://raw.githubusercontent.com/oxalorg/sakura/master/sakura.css&amp;quot;
pandoc --css /notes/sakura.css --from markdown --to html $&amp;lt; -o $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can remote sync the entire website easily using rsync:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rsync --exclude &#39;*.md&#39; source/ destination/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s the basics. This can easily be used to create your own
blog, websites, small projects, pretty much anything. The
best part being that it needs no &amp;lsquo;rules&amp;rsquo; from your end,
you&amp;rsquo;re free to structure your content anyway you like; something
which is missing from almost every static site generator out
there. This is one of my quibbles which I&amp;rsquo;m trying to fix with
&lt;a href=&#34;https://github.com/oxalorg/dystic&#34;&gt;dystic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I added a couple more feature including making automatic
indexes, sorting using title/date, metadata parsing etc. But I
quickly realised that it&amp;rsquo;s a lot of pain to be doing it using
&lt;em&gt;only&lt;/em&gt; GNU Make. So I&amp;rsquo;ve decided to start working on &lt;code&gt;dystic&lt;/code&gt;
again. Maybe even re-write it in &lt;code&gt;nim&lt;/code&gt; or &lt;code&gt;golang&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let me know your comments below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Guide to installing stagit on macOS / OSX</title>
      <link>http://computableverse.com/blog/guide-installing-stagit-macos-osx/</link>
      <pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://computableverse.com/blog/guide-installing-stagit-macos-osx/</guid>
      <description>&lt;p&gt;Stagit, a git web viewer, is relatively hard to find (at least it was for me), but I quickly fell in love with the simplicity. It&amp;rsquo;s easy to use, looks decent, and best of all it&amp;rsquo;s static. So here&amp;rsquo;s a small guide to install it on macOS because, well, do people even remember how to build and install programs without a package manager? :P&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First we need to install &lt;code&gt;libgit2&lt;/code&gt; dependency of &lt;code&gt;stagit&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install libgit2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install &lt;code&gt;libgit2&lt;/code&gt; in the location: &lt;code&gt;/usr/local/Cellar/libgit2/0.24.1/&lt;/code&gt; (the 0.24.1  version may vary, regardless home-brew will output the location where the library was installed, so take a note of it).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Clone the stagit repository, since we will be building it on our own.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://git.2f30.org/stagit.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now before moving on, you can either choose to build from the latest master commit, or checkout a version before building. If you want to build a version, find all the versions using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tags -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# git checkout tags/&amp;lt;version&amp;gt; 
# e.g.:
git checkout tags/0.4
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now edit the &lt;code&gt;config.mk&lt;/code&gt; file in the directory as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# add /share/ after PREFIX
MANPREFIX = ${PREFIX}/share/man

...

# set the library path as determined in step 1
GITINC = /usr/local/Cellar/libgit2/0.24.1/include/
GITLIB = /usr/local/Cellar/libgit2/0.24.1/lib/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go back to command line and run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If all went well, you can now &lt;code&gt;man stagit&lt;/code&gt; and start using it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Guide to easy publishing and distributing your python application</title>
      <link>http://computableverse.com/blog/guide-publish-distribute-python-app/</link>
      <pubDate>Sat, 30 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://computableverse.com/blog/guide-publish-distribute-python-app/</guid>
      <description>&lt;p&gt;Let me be real for a second. It&amp;rsquo;s a goddamn pain to get your python app distributed easily, unless you already know how to. Then it&amp;rsquo;s a breeze. Here&amp;rsquo;s a clean, small, and quick guide explaining just that. No bullshit.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;First &lt;code&gt;cd&lt;/code&gt; into your project folder, preferably with &lt;code&gt;vitrualenv&lt;/code&gt; active. Then create a &lt;code&gt;setup.py&lt;/code&gt; file in the directory similar to this:&lt;/p&gt;
from setuptools import setup
from proj import _VERSION
setup(
    name=&#39;&lt;proj&gt;&#39;,
    packages=[&#39;&lt;proj&gt;&#39;],
    version=_VERSION, 
    description=&#39;&lt;proj&gt;&#39;,
    long_description=&#39;Please visit https://github.com/MiteshNinja/&lt;proj&gt; for more details.&#39;,
    author=&#39;Mitesh Shah&#39;,
    author_email=&#39;mitesh@miteshshah.com&#39;,
    url=&#39;https://github.com/MiteshNinja/&lt;proj&gt;&#39;,
    download_url=&#39;https://github.com/MiteshNinja/&lt;proj&gt;/tarball/&#39; +
    _VERSION,
    keywords=[&#39;python&#39;, &#39;proj&#39;],
    classifiers=[],
    install_requires=[
        &#39;package1&#39;, &#39;package2&#39;, &#39;package3&#39;
    ],
    entry_points={
        &#39;console_scripts&#39;: [
            &#39;proj=proj:main&#39;,
        ],
    })

&lt;p&gt;Now install the binary using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python3 setup.py bdist_wheel
pip3 install dist/dystic...[TAB to autocomplete]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application will get installed and a &lt;code&gt;dist&lt;/code&gt; and &lt;code&gt;build&lt;/code&gt; directory will be also be created.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;virtualenv&lt;/code&gt; active, make sure the application got installed by either running the command line binary, or running a python interpreter and checking as follows:&lt;/p&gt;
&gt;&gt;&gt; import dystic
&gt;&gt;&gt; dystic
&lt;module &#39;dystic&#39; from &#39;/home/ox/Dropbox/Projects/dystic/venv/lib/python3.5/site-packages/dystic/__init__.py&#39;&gt;

&lt;p&gt;Now inside your &lt;code&gt;proj/__init__.py&lt;/code&gt; file, include a variable as follows:&lt;/p&gt;
_VERSION = 0.1.0

&lt;p&gt;You only need to change this version and commit whenever making a version change, ofcourse also rebuilding the wheels.&lt;/p&gt;

&lt;p&gt;To distribute the application on &lt;code&gt;pypi&lt;/code&gt;, go to &lt;a href=&#34;https://pypi.python.org/pypi&#34;&gt;https://pypi.python.org/pypi&lt;/a&gt; and create an account and create a file &lt;code&gt;~/.pypirc&lt;/code&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[distutils]
index-servers=
    pypi
    pypitest

[pypitest]
repository = https://testpypi.python.org/pypi
username = MiteshNinja
password = password

[pypi]
repository = https://pypi.python.org/pypi
username = MiteshNinja
password = password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: you can also create an account on pypitest server to test your app beforehand.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now for uploading you need &lt;code&gt;twine&lt;/code&gt;. Install as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip3 install twine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upload to pypi, simply run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;twine upload dist/&amp;lt;proj&amp;gt;-&amp;lt;version&amp;gt;-py3-none-any.whl
# or any .whl file created in dist folder
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila. That&amp;rsquo;s about it. You can now &lt;code&gt;pip3 install &amp;lt;proj&amp;gt;&lt;/code&gt; from anywhere :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Secure flask-admin using flask-basicauth</title>
      <link>http://computableverse.com/blog/flask-admin-using-basicauth/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://computableverse.com/blog/flask-admin-using-basicauth/</guid>
      <description>&lt;p&gt;I could not find a way to protect my flask-admin installation at &lt;code&gt;/admin&lt;/code&gt; using &lt;code&gt;Flask-BasicAuth&lt;/code&gt;, so I decided to write this for future explorers!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The flask-admin docs praise the simplicity and awesomeness of using HTTP basic authentication, and also point the user towards a small extenstion which makes this easy process even easier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The simplest form of authentication is HTTP Basic Auth. It doesn’t interfere with your database models, and it doesn’t require you to write any new view logic or template code.
Have a look at Flask-BasicAuth to see just how easy it is to put your whole application behind HTTP Basic Auth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and then they drop the bomb saying:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfortunately, there is no easy way of applying HTTP Basic Auth just to your admin interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh well. I definitely do not want people to log in when they land on my index page, so that rules the above option out.&lt;/p&gt;

&lt;p&gt;Thankfully, it&amp;rsquo;s rather quite easy to extend admin views to support &lt;code&gt;flask-BasicAuth&lt;/code&gt;. We just need to override two functions in our admin &lt;code&gt;ModelView&lt;/code&gt; class.&lt;/p&gt;
class ModelView(sqla.ModelView):
    def is_accessible(self):
        if not basic_auth.authenticate():
            raise AuthException(&#39;Not authenticated.&#39;)
        else:
            return True

    def inaccessible_callback(self, name, **kwargs):
        return redirect(basic_auth.challenge())

&lt;p&gt;Here &lt;code&gt;basic_auth&lt;/code&gt; is defined as &lt;code&gt;basic_auth = BasicAuth(app)&lt;/code&gt; directly borrowed from the quickstart section of BasicAuth docs.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;BasicAuth&lt;/code&gt; can&amp;rsquo;t authenticate the user, it will raise an exception which inturn will call the &lt;code&gt;inaccessible_callback&lt;/code&gt; which will challenge the user to provide authentication details.&lt;/p&gt;

&lt;p&gt;The exception, &lt;code&gt;AuthException&lt;/code&gt;, is nothing but a simple &lt;code&gt;HTTPException&lt;/code&gt; provided by &lt;code&gt;werkzeug&lt;/code&gt;:&lt;/p&gt;
from werkzeug.exceptions import HTTPException

class AuthException(HTTPException):
    def __init__(self, message):
        super().__init__(message, Response(
            &#34;You could not be authenticated. Please refresh the page.&#34;, 401,
            {&#39;WWW-Authenticate&#39;: &#39;Basic realm=&#34;Login Required&#34;&#39;}
        ))

&lt;p&gt;Now we can call our admin views normally like this:&lt;/p&gt;
admin = Admin(app, name=&#39;ninjas-nest&#39;)
admin.add_view(ModelView(Post, db.session))
admin.add_view(ModelView(PostFiles, db.session))

&lt;p&gt;TADA! All the urls prefixed with &lt;code&gt;/admin&lt;/code&gt; now require authentication before you can proceed.&lt;/p&gt;

&lt;p&gt;WARNING: Please note that this is not secure on it&amp;rsquo;s own. It will send username and password without any encryption. Only use it with HTTPS (SSL/TLS). Also, this does not block ips which have a lot of failed attempts which could lead to security concerns. I will deal with this in a later post.&lt;/p&gt;

&lt;p&gt;Let me know if you have any better way of protecting only &lt;code&gt;flask-admin&lt;/code&gt; in the comments below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implement HTTPS using SSL/TLS for FREE within 5 minutes</title>
      <link>http://computableverse.com/blog/implement-https-using-ssl-tls-free-fast/</link>
      <pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://computableverse.com/blog/implement-https-using-ssl-tls-free-fast/</guid>
      <description>&lt;p&gt;I reckon I&amp;rsquo;ll need to set up TLS for several sites in the future. Applying the DRY principle, I&amp;rsquo;m documenting the steps while it&amp;rsquo;s fresh in my head, so that I don&amp;rsquo;t have to waste time 10 months down the line.&lt;/p&gt;

&lt;p&gt;So let&amp;rsquo;s keep this short and useful.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;install-letsencrypt&#34;&gt;Install letsencrypt&lt;/h3&gt;

&lt;p&gt;No wizardry here. Simple as sh. Refer this &lt;a href=&#34;https://www.nginx.com/blog/free-certificates-lets-encrypt-and-nginx/&#34;&gt;guide&lt;/a&gt; for more details.&lt;/p&gt;
sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt
cd /opt/letsencrypt
sudo ./letsencrypt-auto
cd /var/www
mkdir letsencrypt
sudo chgrp www-data letsencrypt

&lt;h3 id=&#34;set-up-letsencrypt-config-file-and-fetch-certificates&#34;&gt;Set up letsencrypt config file and fetch certificates&lt;/h3&gt;

&lt;p&gt;More info &lt;a href=&#34;https://gist.github.com/xrstf/581981008b6be0d2224f&#34;&gt;here&lt;/a&gt;, but siriusly no need to get too involved. Just run the below script as follows &lt;code&gt;sh setupLEConfig.sh &amp;lt;your-domain-name-here&amp;gt; &amp;lt;your-email-here&amp;gt;&lt;/code&gt;:&lt;/p&gt;
#!/bin/bash

cat &lt;&lt;EOF &gt; /etc/letsencrypt/configs/$1.conf
domains = $1
rsa-key-size = 4096

# the current closed beta (as of 2015-Nov-07) is using this server
server = https://acme-v01.api.letsencrypt.org/directory

# this address will receive renewal reminders
email = $2

# turn off the ncurses UI, we want this to be run as a cronjob
text = True

# authenticate by placing a file in the webroot (under .well-known/acme-challenge/)
# and then letting LE fetch it
authenticator = webroot
webroot-path = /var/www/letsencrypt/
EOF

&lt;h3 id=&#34;fetch-certifcates-and-verify&#34;&gt;Fetch certifcates and verify&lt;/h3&gt;

&lt;p&gt;Point CA (certificate authority) where to find temporary files used for authenticating that you own the domain.&lt;/p&gt;
server {
    listen 80;
    server_name mitesh.ninja;

    # This block is important
    location /.well-known/acme-challenge {
        root /var/www/letsencrypt;
    }
}

&lt;p&gt;Now restart nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nginx -t &amp;amp;&amp;amp; sudo nginx -s reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and actually fetch the certs:&lt;/p&gt;
cd /opt/letsencrypt
./letsencrypt-auto --config /etc/letsencrypt/configs/mitesh.ninja.conf certonly

&lt;h3 id=&#34;final-nginx-config-for-https&#34;&gt;Final nginx config for https&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Listen on port 443 (for ssl).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Tell nginx where to find your certificates.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Tell CA (certificate authority) where to find temporary files used for authenticating that you own the domain.&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;We did this in http server block for first time authentication.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;https server block for authentication henceforth.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rewrite http traffic to https.&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
server {
    ###
    # Replace &#39;mitesh.ninja&#39; with your own FQDN.
    ##
    listen 443 ssl; # Step 1
    server_name mitesh.ninja;

    # Step 2
    ssl_certificate /etc/letsencrypt/live/mitesh.ninja/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mitesh.ninja/privkey.pem;

    # Step 3
    location /.well-known/acme-challenge {
        root /var/www/letsencrypt;
    }
}
server {
    listen 80;
    server_name mitesh.ninja www.mitesh.ninja;
    return 301 https://$host$request_uri;
}

&lt;p&gt;Now restart nginx&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nginx -t &amp;amp;&amp;amp; sudo nginx -s reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;VOILA!&lt;/strong&gt; That&amp;rsquo;s it. https live at &lt;a href=&#34;https://mitesh.ninja&#34;&gt;https://mitesh.ninja&lt;/a&gt;. View full nginx conf &lt;a href=&#34;https://github.com/MiteshNinja/mitesh.ninja/blob/master/conf/mitesh.ninja.conf&#34;&gt;here&lt;/a&gt; :D)&lt;/p&gt;

&lt;p&gt;Note: The certificates will expire every 3 months. I haven&amp;rsquo;t set up a cron job atm. I&amp;rsquo;m researching more about it, trying new stuff and will most likely roll up a small python script to handle auto renewing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How I set up my fresh Ubuntu 16.04 install.</title>
      <link>http://computableverse.com/blog/ubuntu-16.04-setting-up/</link>
      <pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://computableverse.com/blog/ubuntu-16.04-setting-up/</guid>
      <description>&lt;p&gt;Even though I don&amp;rsquo;t change my OS too frequently. I almost always end up tinkering around with it once every 2-3 months. I keep finding myself coming back to Canonicals Ubuntu, mostly because everything &amp;lsquo;just works&amp;rsquo;. Lets hope, that someday, I can muster the courage to take the leap and purify myself on the path to the &lt;em&gt;Arch Way&lt;/em&gt;. Till then, let me fill my pockets with Ubuntu releases.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Whats the most important thing on a fresh OS install? Definitely the looks, I would say. I started with installing the &lt;code&gt;unity-tweak-tool&lt;/code&gt;, a system-wide GTK3+ theme &lt;code&gt;Arc-Dark&lt;/code&gt;&lt;sup&gt;&lt;a href=&#34;https://github.com/horst3180/arc-theme&#34;&gt;link&lt;/a&gt;&lt;/sup&gt;, and an icon pack &lt;code&gt;paper-icon-theme&lt;/code&gt;&lt;sup&gt;&lt;a href=&#34;https://snwh.org/paper/icons&#34;&gt;link&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
sudo apt install -y unity-tweak-tool

# Arc theme
wget http://download.opensuse.org/repositories/home:Horst3180/xUbuntu_15.10/Release.key
sudo apt-key add - &lt; Release.key
sudo sh -c &#34;echo &#39;deb http://download.opensuse.org/repositories/home:/Horst3180/xUbuntu_15.10/ /&#39; &gt;&gt; /etc/apt/sources.list.d/arc-theme.list&#34;
sudo apt update
sudo apt -y install arc-theme

# Paper icons
sudo add-apt-repository ppa:snwh/pulp
sudo apt update
sudo apt install -y paper-icon-theme # paper-gtk-theme

&lt;p&gt;Amazingly, the &lt;code&gt;Arc-Dark&lt;/code&gt; theme has a complimentary &lt;a href=&#34;https://github.com/horst3180/arc-firefox-theme&#34;&gt;Arc-Firefox theme&lt;/a&gt; to go with it. It has some inconsistencies, which I fixed using simple stylesheets.&lt;/p&gt;
/* https://wiki.archlinux.org/index.php/Firefox#Unreadable_input_fields_with_dark_GTK.2B_themes
 * Add the below css to
 * ~/.mozilla/firefox/xxxxxxxx.default/chrome/userContent.css
*/
input:not(.urlbar-input):not(.textbox-input):not(.form-control):not([type=&#39;checkbox&#39;]) {
    -moz-appearance: none !important;
    background-color: white;
    color: black;
}

#downloads-indicator-counter {
    color: white;
}

textarea {
    -moz-appearance: none !important;
    background-color: white;
    color: black;
}

select {
    -moz-appearance: none !important;
    background-color: white;
    color: black;
}

&lt;p&gt;Now that my desktop looked pretty. It was time for some functionality.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Synaptic&lt;/strong&gt; : Although using &lt;code&gt;apt&lt;/code&gt; is really easy. It&amp;rsquo;s always good to have a a graphical package manager for times when you&amp;rsquo;re lazy ;P&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gdebi&lt;/strong&gt; : Installing .deb files with command line is pure torture (wait until you have unmet dependecies and watch the hell burn down). Instead, just install gdebi and let the demon die.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nautilus-dropbox&lt;/strong&gt; : I use dropbox a lot. I don&amp;rsquo;t like being dependent on software, but hell I&amp;rsquo;m dependent on dropbox. I mostly use it to work on projects across different devices. And &lt;em&gt;everything&lt;/em&gt; else too. I literally don&amp;rsquo;t use my hard disk at all, apart for local dropbox storage ofcourse. This bugs me a lot to be honest, I might think of encrypting everything before uploading on dropbox. Will have to read their TOS first.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keepassx&lt;/strong&gt; : I feel that I could talk a lot more about a password manager than the scanty space available in this puny unordered list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also installed the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;atom&lt;/strong&gt;: a text editor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Chrome&lt;/strong&gt;: Incase firefox fails me.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitKraken&lt;/strong&gt;: graphic git&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HexChat&lt;/strong&gt;: IRC - &lt;code&gt;MiteshNinja&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;kdenlive&lt;/strong&gt;: video editor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NeoVim&lt;/strong&gt;: yet another text editor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;simplescreenrecorder&lt;/strong&gt;: simple screen recorder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Steam&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;umake&lt;/strong&gt;: ubuntu-make to install PyCharm and CLion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VLC&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;zsh&lt;/strong&gt;: get this. now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the above programs were installed using these commands:&lt;/p&gt;
sudo apt install -y synaptic gdebi nautilus-dropbox keepassx kdenlive google-chrome zsh

# Screen recorder
sudo add-apt-repository ppa:maarten-baert/simplescreenrecorder
sudo apt update
sudo apt install -y simplescreenrecorder

&lt;p&gt;The only thing I lack is a decent email notification system. I am currently using a simple python + cron script to get the job done, but I&amp;rsquo;ll soon be writing an appindicator/status bar application to get that to check my emails for me.&lt;/p&gt;

&lt;p&gt;I also set up my terminal, which I&amp;rsquo;ve described in this &lt;a href=&#34;http://computableverse.com/blog/my-terminal-setup&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What do &lt;em&gt;you&lt;/em&gt; do on a fresh OS install?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NeoVim quick starter guide with python autocomplete.</title>
      <link>http://computableverse.com/blog/neovim-guide-python/</link>
      <pubDate>Sat, 21 May 2016 00:00:00 +0000</pubDate>
      
      <guid>http://computableverse.com/blog/neovim-guide-python/</guid>
      <description>&lt;p&gt;So there&amp;rsquo;s no simple guide available online which just gets me running really quickly. Most of them are either too detailed, or too obscure. So I decided to post my own.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Install neovim (guide &lt;a href=&#34;https://github.com/neovim/neovim/wiki/Installing-Neovim&#34;&gt;here&lt;/a&gt;). On ubuntu it is:&lt;/p&gt;
sudo add-apt-repository ppa:neovim-ppa/unstable
sudo apt-get update
sudo apt-get install neovim

&lt;p&gt;To use the python plugins install neovim python package:&lt;/p&gt;
sudo pip3 install neovim
#sudo pip2 install neovim

&lt;p&gt;Setup the NeoVim config files.&lt;/p&gt;
mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
mkdir $XDG_CONFIG_HOME/nvim # You can link .vim here, but I&#39;m starting from scratch.
touch $XDG_CONFIG_HOME/nvim/init.vim

&lt;p&gt;Now we install a plugin manager, &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein.vim&lt;/a&gt;:&lt;/p&gt;
cd /tmp &amp;&amp; \
curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh &gt; installer.sh &amp;&amp;\
mkdir -p $HOME/.random &amp;&amp;\
sh ./installer.sh $HOME/.random ||\
echo &#34;Failed.&#34;

&lt;p&gt;The installer will throw a wall of text and ask you to copy-pasta it in your &lt;code&gt;init.vim&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now we need to let NeoVim know where our python binaries are located.&lt;/p&gt;
let g:python_host_prog = &#39;/usr/bin/python&#39;
let g:python3_host_prog = &#39;/usr/bin/python3&#39;

&lt;p&gt;Uncomment the following lines in your &lt;code&gt;init.vim&lt;/code&gt; file, which installs plugins on startup:&lt;/p&gt;
if dein#check_install()
  call dein#install()
endif

&lt;p&gt;Now to install autocomplete for python. We will use &lt;code&gt;deoplete.nvim&lt;/code&gt; with &lt;code&gt;deoplete-jedi&lt;/code&gt; as source.&lt;/p&gt;
# First install jedi
sudo pip3 install jedi
# Also install yapf for formatting
sudo pip3 install yapf

&lt;p&gt;Now add these lines to your &lt;code&gt;init.vim&lt;/code&gt;:&lt;/p&gt;
call dein#add(&#39;Shougo/deoplete.nvim&#39;)
call deoplete#enable()

autocmd FileType python nnoremap &lt;leader&gt;y :0,$!yapf&lt;Cr&gt;
autocmd CompleteDone * pclose &#34; To close preview window of deoplete automagically

&lt;p&gt;Feel free to checkout my &lt;a href=&#34;https://github.com/MiteshNinja/dotfiles/tree/master/nvim&#34;&gt;NeoVim config&lt;/a&gt; on github.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>